// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"context"
	"github.com/mrnbort/webhook.git/task"
	"sync"
)

// Ensure, that ExecutorMock does implement Executor.
// If this is not the case, regenerate this file with moq.
var _ Executor = &ExecutorMock{}

// ExecutorMock is a mock implementation of Executor.
//
//	func TestSomethingThatUsesExecutor(t *testing.T) {
//
//		// make and configure a mocked Executor
//		mockedExecutor := &ExecutorMock{
//			ExecuteTaskFunc: func(ctx context.Context, request task.Task) error {
//				panic("mock out the ExecuteTask method")
//			},
//		}
//
//		// use mockedExecutor in code that requires Executor
//		// and then make assertions.
//
//	}
type ExecutorMock struct {
	// ExecuteTaskFunc mocks the ExecuteTask method.
	ExecuteTaskFunc func(ctx context.Context, request task.Task) error

	// calls tracks calls to the methods.
	calls struct {
		// ExecuteTask holds details about calls to the ExecuteTask method.
		ExecuteTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request task.Task
		}
	}
	lockExecuteTask sync.RWMutex
}

// ExecuteTask calls ExecuteTaskFunc.
func (mock *ExecutorMock) ExecuteTask(ctx context.Context, request task.Task) error {
	if mock.ExecuteTaskFunc == nil {
		panic("ExecutorMock.ExecuteTaskFunc: method is nil but Executor.ExecuteTask was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request task.Task
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockExecuteTask.Lock()
	mock.calls.ExecuteTask = append(mock.calls.ExecuteTask, callInfo)
	mock.lockExecuteTask.Unlock()
	return mock.ExecuteTaskFunc(ctx, request)
}

// ExecuteTaskCalls gets all the calls that were made to ExecuteTask.
// Check the length with:
//
//	len(mockedExecutor.ExecuteTaskCalls())
func (mock *ExecutorMock) ExecuteTaskCalls() []struct {
	Ctx     context.Context
	Request task.Task
} {
	var calls []struct {
		Ctx     context.Context
		Request task.Task
	}
	mock.lockExecuteTask.RLock()
	calls = mock.calls.ExecuteTask
	mock.lockExecuteTask.RUnlock()
	return calls
}
